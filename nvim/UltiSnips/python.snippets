# autoshebang
snippet #! "Insert the python-shebang" b
#!/bin/python
endsnippet

# main-clause
snippet main "if __name__ == '__main__'" b
if __name__ == "__main__":
	$1
endsnippet

snippet class "class <Classname>:" b
class ${1:Name}:
	
	def __init__(self):
		${2:pass}
endsnippet

# commenter
snippet cbb "Add a section with bigger highlighting" 
# =====`!p snip.rv = "=" * len(t[1])`
# ${1:Section name}
# =====`!p snip.rv = "=" * len(t[1])`
endsnippet

snippet cb "Add a separator for a new section"
# -----`!p snip.rv = "-" * len(t[1])`
# ${1:Section name}
# -----`!p snip.rv = "-" * len(t[1])`
endsnippet

snippet "def(s)?" "def <name>(self):" rb
def ${1:name}`!p
if match.group(1) != None:
	snip.rv = '(self):'
else:
	snip.rv = '():'
`
	"""
	$0
	"""
endsnippet

snippet if "auto if" b
if $1:
	$0
endsnippet

snippet ife "auto if-else" b
if $1:
	$0
else:
	pass
endsnippet

snippet while "while loop" b
while $1:
	${0:pass}
endsnippet

snippet print "print autocomplete" w
print("$0")
endsnippet

snippet printf "printf" b
print(f"$0")
endsnippet

snippet "(\S+) = open" "add 'close()'" r
`!p
snip.rv = f"{match.group(1)} = "
`open(${1:path}, "${2:mode}")

$0

# ----- File close -----
`!p
snip.rv = f"{match.group(1)}.close()"
`
endsnippet

snippet try "add automatically 'except'" b
try:
	$0
except ${1:Error}:
	pass
endsnippet
