# ------------------------------------------------------------------------
# Everything is included otherwise this file would be pretty large... 
# ------------------------------------------------------------------------
extends latex/chemic
extends latex/color_boxes
extends latex/commands
extends latex/default
extends latex/environments
extends latex/global_functions
extends latex/graphic
extends latex/informatic
extends latex/macros
extends latex/math
extends latex/packages
extends latex/physics
extends latex/symbols_constants
extends latex/sectioning
extends latex/settings
extends latex/small_functions
extends latex/tables
extends latex/text_style


#global !p
#def in_ce_env() -> bool:
#	"""
#	This will look if the first 4 chars in the line are "\ce{" and
#	the last char "}".
#	If yes => Return true
#	else => False
#	"""
#
#	if snip.buffer[snip.line].startswith("\ce{"):
#		return True
#	else:
#		return False
#
#def set_arg_draw() -> bool:
#	"""
#	It will read how many args the \draw commands needs and add them
#	automatically.
#	"""
#
#	placeholders = ""
#
#	# Get the amount of placeholders
#	amount_coordinates = int(snip.buffer[snip.line].strip())
#	
#	# Set the starting line "\draw "
#	amount_tabs = len(snip.buffer[snip.line].split("draw"))
#	snip.buffer[snip.line] = ""
#
#	for tab_index in range(amount_tabs):
#		placeholders += "\t"
#	placeholders += "\\draw"
#
#	# add the placeholders
#	for placeholder_index in range(1, amount_coordinates + 1):
#		placeholders += f" (${placeholder_index}) --"
#	placeholders += f" (${amount_coordinates + 1});"
#
#	# enable the new tabstops
#	snip.expand_anon(placeholders)
#
#def create_row_placeholders(snip):
#	"""
#	It will get the amount of columns and creates the placeholders.
#	"""
#	
#	# get the amount of placeholders
#	placeholders_amount = int(snip.buffer[snip.line].strip())
#
#	# how big is the indentation?
#	#snip.buffer[snip.line] = ""
#	
#	# create anonymous snippet with expected content and number of tabstops
#	placeholders = ' & '.join([f"${placeholder_index + 1}" for placeholder_index in range(placeholders_amount)])
#	
#	# add newline
#	placeholders += "\\\\\\"
#	
#	# expand anonymous snippet
#	snip.expand_anon(placeholders)
#
#def create_table(snip):
#	"""
#	This will create the matrix with its amount of columns.
#	"""
#	return_string = "\\begin{tabularx}{\\linewidth}{\n\t|"
#
#	amount_columns = int(snip.buffer[snip.line].split()[-1])
#	amount_tabs = len(snip.buffer[snip.line].split("mat"))
#
#	# reset line
#	snip.buffer[snip.line] = "\t" * amount_tabs
#
#	for column_index in range(amount_columns):
#		return_string += ">{\\raggedright\\arraybackslash\\hspace{0pt}}X\n\t|"
#	return_string += "}\n\t\\hline\n\t$0\n\\end{tabularx}$0"
#
#	# expand snippet
#	snip.expand_anon(return_string)
#
#def create_matrix(snip):
#	"""
#	This will create the matrix with its amount of columns.
#	"""
#
#	return_string = "\left(\n\t\\begin{tabular}{"
#
#	amount_columns = int(snip.buffer[snip.line].strip())
#	amount_tabs = len(snip.buffer[snip.line].split("mat"))
#
#	# reset line
#	snip.buffer[snip.line] = "\t" * amount_tabs
#
#	for column_index in range(amount_columns):
#		return_string += "c"
#	
#	return_string += "}\n\t"
#	
#	return_string += "\t\t$0\n\t\end{tabular}"
#	return_string += "\n\\right)"
#
#	# expand snippet
#	snip.expand_anon(return_string)
#endglobal
